pb6)
PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63,
       55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]
PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55,
       30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]
Rotations = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]
IP=[58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7]
IPI=[40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25]
S1=[

[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],

[0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],

[4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],

[15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],

]
S2=[

[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],

[3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],

[0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],

[13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],

]
S3=[[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],

[13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],

[13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],

[1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],

]
S4=[
[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],

[13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],

[10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],

[3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],

]
S5=[
[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],

[14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],

[4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],

[11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],

]
S6=[

[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],

[10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],

[9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],

[4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],

]
S7=[

[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],

[13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],

[1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],

[6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],

]
S8=[

[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],

[1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],

[7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],

[2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],

]
S=[S1,S2,S3,S4,S5,S6,S7,S8]
P=[16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25]
E=[32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1]
def leftRotate(value, n):
    num_bits_in_int = 28
    n = n % num_bits_in_int
    mask = (1 << num_bits_in_int) - 1
    result = (value << n) | (value >> (num_bits_in_int - n))
    result = result & mask
    result = bin(result)
    result = result[2:]
    if (len(result) < 28):
        for q in range(28 - len(result)):
            result = '0' + result
    return result

def binary(enter):
    convert = ''
    for i in range(len(enter) - 1, -1, -1):
        l = int(enter[i], 16)
        l = bin(l)
        l = l[2:]
        if (len(l) % 4 != 0):
            for j in range(4 - len(l)):
                l = '0' + l
            convert = l + convert
        else:
            convert = l + convert
    return convert

key = input()
plain=input()
num_rounds=int(input())
plain=binary(plain)
key = binary(key)
outK = ''
new_plain=plain
for i in range(56):
    index = PC1[i]
    outK = outK + key[index - 1]
outK = int(outK, 2)
outK = hex(outK)
outK = outK[2:]
if (len(outK) != 14):
    for j in range(14 - len(outK)):
        outK = '0' + outK
outK = binary(outK)
keys = []
for i in range(16):
    outk1 = outK[0:28]
    outk2 = outK[28:56]
    outk1 = leftRotate(int(outk1, 2), Rotations[i])
    outk2 = leftRotate(int(outk2, 2), Rotations[i])
    outK = str(outk1) + str(outk2)
    outt = ''
    for k in range(48):
        index = PC2[k]
        outt = outt + outK[index - 1]
    outt = int(outt, 2)
    outt = hex(outt)
    outt = outt[2:]
    if len(outt) != 12:
        for j in range(12 - len(outt)):
            outt = '0' + outt
    keys.append(outt)  # hexa format
####################################3
O=int(plain,2)
O=hex(O)
O=O[2:]
if( len(O)<16):
    for j in range (16-len(O)):
        O='0'+O
for z in range(num_rounds):
    output=''
    if z!=0 :
        plain=new_plain
        plain = binary(plain)
    for i in range(64):
        index = IP[i]
        output = output + plain[index - 1]
    new_plain = output
    for i in range(16):
        output=''
        pl_left = new_plain[0:32]
        #print ("left = ", len(pl_left))
        pl_right = new_plain[32:64]
        #print("left = ", len(pl_right))
        for j in range (0,48):
            index = E[j]
            output = output+pl_right[index-1]
        output=int(output,2) ^ int(keys[i],16)
        output=hex(output)
        output=output[2:]
        if len(output )!= 12:
            for q in range(12-len(output)):
                output='0'+output
        output=binary(output)
        outputS=''
        s=0
        for k in range(0,len(output),6):
            bits=output[k:k+6]
            row=int(bits[0]+bits[5],2)
            column=int(bits[1:5],2)
            currentS=S[s]
            currentSrow=currentS[row]
            currentScol=currentSrow[column]
            rowcolres=hex(currentScol)
            outputS=outputS+rowcolres[2:]
            s=s+1
        if len(outputS)!=8:
            for q in range (8-len(outputS)):
                outputS='0'+outputS
        outputS=binary(outputS)
        output=''
        for q in range (0,32):
            index = P[q]
            output = output+outputS[index-1]
        final = int(output,2)
        pl_left = int(pl_left,2)
        final = final ^ pl_left
        final = hex(final)
        final = final[2:]
        if len(final) != 8:
            for q in range(8 - len(final)):
                final = '0' + final
        final = binary(final)
        pl_right=int(pl_right,2)
        pl_right=hex(pl_right)
        pl_right=pl_right[2:]
        if len(pl_right) != 8:
            for q in range(8 - len(pl_right)):
                pl_right = '0' + pl_right
        pl_right=binary(pl_right)
        new_plain=pl_right+final
    new_plain=new_plain[32:64]+new_plain[0:32]
    O=''
    for q in range(0, 64):
        index = IPI[q]
        O = O + new_plain[index - 1]
    O=int(O,2)
    O=hex(O)
    O=O[2:]
    if len(O)!=16:
        for i in range(16-len(O)):
            O='0'+O
    new_plain=O
print(O.upper())
